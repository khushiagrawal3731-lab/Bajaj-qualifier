package com.example.bajajfinserv;

import org.springframework.boot.CommandLineRunner;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

@Component
public class StartupRunner implements CommandLineRunner {

    private final RestTemplate restTemplate;
    private static final Logger logger = Logger.getLogger(StartupRunner.class.getName());

    // API URLs
    private static final String GENERATE_WEBHOOK_URL = "https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA";
    private static final String DEFAULT_SUBMIT_URL = "https://bfhldevapigw.healthrx.co.in/hiring/testWebhook/JAVA";

    public StartupRunner(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public void run(String... args) {
        logger.info(" Starting Bajaj Finserv Health Qualifier Solution...");
        
        try {
            // Step 1: Generate webhook and get access token
            WebhookResponse webhookResponse = generateWebhook();
            
            if (webhookResponse != null) {
                // Step 2: Generate the appropriate SQL query
                String finalQuery = generateSqlQuery();
                logger.info("Generated SQL Query: " + finalQuery);
                
                // Step 3: Submit the solution
                submitSolution(webhookResponse.getWebhookUrl(), 
                              webhookResponse.getAccessToken(), 
                              finalQuery);
            }
            
        } catch (Exception e) {
            logger.severe(" Critical error during execution: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private WebhookResponse generateWebhook() {
        try {
            // Request body
            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("name", "John Doe");
            requestBody.put("regNo", "REG12347");
            requestBody.put("email", "john@example.com");
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<Map<String, String>> entity = new HttpEntity<>(requestBody, headers);
            
            logger.info(" Sending POST request to generate webhook...");
            ResponseEntity<Map> response = restTemplate.exchange(
                GENERATE_WEBHOOK_URL, HttpMethod.POST, entity, Map.class);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                Map<String, String> responseBody = response.getBody();
                String webhookUrl = responseBody.get("webhook");
                String accessToken = responseBody.get("accessToken");
                
                logger.info(" Webhook URL received: " + webhookUrl);
                logger.info(" Access token received: " + (accessToken != null ? "***" + accessToken.substring(accessToken.length() - 6) : "null"));
                
                return new WebhookResponse(webhookUrl, accessToken);
            } else {
                logger.warning("  Unexpected response status: " + response.getStatusCode());
            }
            
        } catch (HttpClientErrorException e) {
            logger.severe(" Client error (4xx) during webhook generation: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
        } catch (HttpServerErrorException e) {
            logger.severe(" Server error (5xx) during webhook generation: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
        } catch (ResourceAccessException e) {
            logger.severe(" Network error - Cannot connect to server: " + e.getMessage());
        } catch (Exception e) {
            logger.severe(" Unexpected error during webhook generation: " + e.getMessage());
        }
        
        return null;
    }

    private String generateSqlQuery() {
        String regNo = "REG12347";
        
        try {
            // Extract last two digits
            int lastTwoDigits = Integer.parseInt(regNo.substring(regNo.length() - 2));
            boolean isOdd = (lastTwoDigits % 2) != 0;
            
            if (isOdd) {
                // Question 1: Customer Order Analysis (for odd numbers)
                return "SELECT c.customer_id, c.name, c.email, c.location, " +
                       "COUNT(o.order_id) AS total_orders, " +
                       "SUM(o.amount) AS total_amount " +
                       "FROM Customers c " +
                       "LEFT JOIN Orders o ON c.customer_id = o.customer_id " +
                       "WHERE c.active = true " +
                       "GROUP BY c.customer_id, c.name, c.email, c.location " +
                       "HAVING total_orders > 0 " +
                       "ORDER BY total_orders DESC, total_amount DESC;";
            } else {
                // Question 2: Employee Salary Analysis (for even numbers)
                return "SELECT e.employee_id, e.name, e.department, e.salary, " +
                       "d.department_name, d.location, " +
                       "(SELECT AVG(salary) FROM Employees WHERE department = e.department) AS avg_department_salary " +
                       "FROM Employees e " +
                       "JOIN Departments d ON e.department = d.department_id " +
                       "WHERE e.salary > (SELECT AVG(salary) FROM Employees WHERE department = e.department) " +
                       "AND e.status = 'active' " +
                       "ORDER BY e.department ASC, e.salary DESC;";
            }
            
        } catch (Exception e) {
            logger.severe(" Error generating SQL query: " + e.getMessage());
            // Fallback query
            return "SELECT 'ERROR: Could not generate proper query' AS error_message;";
        }
    }

    private void submitSolution(String webhookUrl, String accessToken, String finalQuery) {
        if (accessToken == null || accessToken.trim().isEmpty()) {
            logger.severe(" Cannot submit solution: Access token is null or empty");
            return;
        }
        
        try {
            String submitUrl = (webhookUrl != null && !webhookUrl.trim().isEmpty()) ? 
                              webhookUrl : DEFAULT_SUBMIT_URL;
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", accessToken);
            
            Map<String, String> requestBody = new HashMap<>();
            requestBody.put("finalQuery", finalQuery);
            
            HttpEntity<Map<String, String>> entity = new HttpEntity<>(requestBody, headers);
            
            logger.info(" Submitting solution to: " + submitUrl);
            ResponseEntity<String> response = restTemplate.exchange(
                submitUrl, HttpMethod.POST, entity, String.class);
            
            if (response.getStatusCode() == HttpStatus.OK) {
                logger.info(" Solution submitted successfully!");
                logger.info(" Response: " + response.getBody());
            } else {
                logger.warning("  Submission completed with status: " + response.getStatusCode());
                logger.info(" Response: " + response.getBody());
            }
            
        } catch (HttpClientErrorException e) {
            logger.severe(" Client error during submission: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
        } catch (HttpServerErrorException e) {
            logger.severe(" Server error during submission: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
        } catch (Exception e) {
            logger.severe(" Unexpected error during submission: " + e.getMessage());
        }
    }

    // Helper class to store webhook response
    private static class WebhookResponse {
        private final String webhookUrl;
        private final String accessToken;
        
        public WebhookResponse(String webhookUrl, String accessToken) {
            this.webhookUrl = webhookUrl;
            this.accessToken = accessToken;
        }
        
        public String getWebhookUrl() { return webhookUrl; }
        public String getAccessToken() { return accessToken; }
    }
}


